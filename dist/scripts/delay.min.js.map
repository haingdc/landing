{"version":3,"sources":["scripts/delay.js"],"sourceRoot":"/public","sourcesContent":["// Copyright 2018-2025 the Deno authors. MIT license.\n// This module is browser compatible.\n// package @std/async\n// reference: https://jsr.io/@std/async/doc/~/delay\n\n/*\n= Options for {@linkcode delay}.\nexport interface DelayOptions {\n  // Signal used to abort the delay.\n  signal?: AbortSignal;\n  // Indicates whether the process should continue to run as long as the timer exists.\n  // @default {true}\n  // \n  persistent?: boolean;\n}\n*/\n\n/**\n * Resolve a {@linkcode Promise} after a given amount of milliseconds.\n *\n * @throws {DOMException} If the optional signal is aborted before the delay\n * duration, and `signal.reason` is undefined.\n * @param {number} ms Duration in milliseconds for how long the delay should last.\n * @param {DelayOptions} options Additional options.\n * @returns {Promise<void>} A promise that resolves after the specified duration.\n *\n * @example Basic usage\n * ```ts no-assert\n * import { delay } from \"@std/async/delay\";\n *\n * // ...\n * const delayedPromise = delay(100);\n * const result = await delayedPromise;\n * // ...\n * ```\n *\n * @example Disable persistence\n *\n * Setting `persistent` to `false` will allow the process to continue to run as\n * long as the timer exists.\n *\n * ```ts no-assert ignore\n * import { delay } from \"@std/async/delay\";\n *\n * // ...\n * await delay(100, { persistent: false });\n * // ...\n * ```\n */\nexport function delay(ms, options = {}) {\n  const { signal, persistent = true } = options;\n  if (signal?.aborted) return Promise.reject(signal.reason);\n  return new Promise((resolve, reject) => {\n    const abort = () => {\n      clearTimeout(i);\n      reject(signal?.reason);\n    };\n    const done = () => {\n      signal?.removeEventListener(\"abort\", abort);\n      resolve();\n    };\n    const i = setTimeout(done, ms);\n    signal?.addEventListener(\"abort\", abort, { once: true });\n    if (persistent === false) {\n      try {\n        // @ts-ignore For browser compatibility\n        Deno.unrefTimer(i);\n      } catch (error) {\n        if (!(error instanceof ReferenceError)) {\n          throw error;\n        }\n        // deno-lint-ignore no-console\n        console.error(\"`persistent` option is only available in Deno\");\n      }\n    }\n  });\n}\n"],"names":["delay","ms","options","signal","persistent","aborted","Promise","reject","reason","resolve","abort","clearTimeout","i","setTimeout","removeEventListener","addEventListener","once","Deno","unrefTimer","error","ReferenceError","console"],"mappings":"AAiDA,OAAO,SAASA,MAAMC,CAAE,MAAEC,EAAAA,uDAAU,CAAC,EAC3BC,EAA8BD,EAA9BC,SAA8BD,EAAtBE,WAAAA,sBAChB,OAAID,SAAAA,EAAQE,OAAO,EAASC,QAAQC,MAAM,CAACJ,EAAOK,MAAM,EACjD,IAAIF,QAAQ,SAACG,EAASF,GAC3B,MAAMG,EAAQ,WACZC,aAAaC,GACbL,QAAOJ,SAAAA,EAAQK,MAAM,CACvB,EAKMI,EAAIC,WAJG,iBACXV,GAAAA,EAAQW,mBAAmB,CAAC,QAASJ,GACrCD,GACF,EAC2BR,GAE3B,SADAE,GAAAA,EAAQY,gBAAgB,CAAC,QAASL,EAAO,CAAEM,KAAM,CAAA,CAAK,GAClDZ,AAAe,CAAA,IAAfA,EACF,GAAI,CAEFa,KAAKC,UAAU,CAACN,EAClB,CAAE,MAAOO,EAAO,CACd,YAAuBC,0FAAjBD,KAAAA,gBACJ,MAAMA,EAGRE,QAAQF,KAAK,CAAC,gDAChB,CAEJ,EACF"}